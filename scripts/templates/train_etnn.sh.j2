#!/bin/bash
#SBATCH -c 24                # Number of cores (-c)
#SBATCH -t 0-70:00          # Runtime in D-HH:MM, minimum of 10 minutes
#SBATCH -p gpu              # Partition to submit to
#SBATCH --gres=gpu:nvidia_a100-sxm4-80gb:1
#SBATCH --mem=200000         # Memory pool for all cores (see also --mem-per-cpu)
#SBATCH -o job_outputs/myoutput_%j.out  # File to which STDOUT will be written, %j inserts jobid
#SBATCH -e job_outputs/myerrors_%j.err  # File to which STDERR will be written, %j inserts jobid

# Load modules
module load ncf/1.0.0-fasrc01
module load miniconda3/py310_22.11.1-1-linux_x64-ncf
module load cuda/12.2.0-fasrc01

# Activate conda env
source ~/.bashrc
conda activate ten
# Training script for {{ experiment_name }}

# DEFINE EXP ARGUMENTS
EXP_NAME={{ experiment_name }}
LIFTERS=({{ lifters | join(' ') }})
DIM={{ dim }}
VISIBLE_DIMS=({{ visible_dims | join(' ') }})
INITIAL_FEATURES="{{ initial_features }}"
NEIGHBOR_TYPES="{{ neighbor_types }}"
CONNECTIVITY="{{ connectivity }}"
NUM_HIDDEN={{ num_hidden }}

# Constants
EPOCHS=1000
BATCH_SIZE=96
WEIGHT_DECAY=1e-16
MIN_LR=0
NUM_LAYERS=7
MODEL_NAME="ten"
SPLITS="egnn"

# Define the predefined target names lists
TARGET_NAMES_0=("alpha")
TARGET_NAMES_1=("mu" "alpha" "homo" "lumo" "gap" "r2")
TARGET_NAMES_2=("zpve" "U0" "U" "H" "G" "Cv")
TARGET_NAMES_3=("mu" "alpha" "homo" "lumo" "gap" "r2" "zpve" "U0" "U" "H" "G" "Cv")
TARGET_NAMES_4=("mu" "alpha" "homo" "lumo")
TARGET_NAMES_5=("gap" "r2" "zpve" "U0")
TARGET_NAMES_6=("U" "H" "G" "Cv")

# Check if an argument is provided; if not, use 0 as the default option
OPTION=${1:-0}

# Select the target names list based on the provided option
case $OPTION in
  0)
    TARGET_NAMES=("${TARGET_NAMES_0[@]}")
    ;;
  1)
    TARGET_NAMES=("${TARGET_NAMES_1[@]}")
    ;;
  2)
    TARGET_NAMES=("${TARGET_NAMES_2[@]}")
    ;;
  3)
    TARGET_NAMES=("${TARGET_NAMES_3[@]}")
    ;;
  4)
    TARGET_NAMES=("${TARGET_NAMES_4[@]}")
    ;;
  5)
    TARGET_NAMES=("${TARGET_NAMES_5[@]}")
    ;;
  6)
    TARGET_NAMES=("${TARGET_NAMES_6[@]}")
    ;;
  *)
    echo "Invalid option. Please provide 0, 1, 2, 3, 4, 5, or 6."
    exit 1
    ;;
esac

for TARGET_NAME in "${TARGET_NAMES[@]}"
do
    # Check if target is one of the first three
    if [[ "$TARGET_NAME" == "gap" || "$TARGET_NAME" == "homo" || "$TARGET_NAME" == "lumo" ]]; then
        LR="1e-3"
    else
        LR="5e-4"
    fi

    echo "Launching job for target: $TARGET_NAME with LR: $LR"

    # Train EGNN in parallel for each TARGET_NAME
    python src/main_qm9.py --lifters "${LIFTERS[@]}" \
                           --dim "$DIM" \
                           --visible_dims "${VISIBLE_DIMS[@]}" \
                           --initial_features "$INITIAL_FEATURES" \
                           --target_name "$TARGET_NAME" \
                           --neighbor_types "$NEIGHBOR_TYPES" \
                           --connectivity "$CONNECTIVITY" \
                           --epochs "$EPOCHS" \
                           --batch_size "$BATCH_SIZE" \
                           --weight_decay "$WEIGHT_DECAY" \
                           --lr "$LR" \
                           --min_lr "$MIN_LR" \
                           --num_layers "$NUM_LAYERS" \
                           --num_hidden "$NUM_HIDDEN" \
                           --model_name "$MODEL_NAME" \
                           --splits "$SPLITS" \
                           --normalize_invariants \
                           --clip_gradient \
                           --run_name "${EXP_NAME} ${TARGET_NAME}" \
                          {% if triangles_only == true %} --triangles_only {% endif %} \
                          {% if use_geometry == false %} --no_geometry {% endif %} &
done

# Wait for all background jobs to finish
echo "All jobs have been launched."
wait
echo "All jobs have been completed."
